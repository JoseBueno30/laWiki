{
  "openapi": "3.0.0",
  "info": {
    "title": "laWiki API Gateway",
    "description": "The Articles API provides endpoints for managing and retrieving articles and article versions within the wiki application. It supports core CRUD (Create, Read, Update, Delete) operations, search functionality, and versioning.",
    "contact": {
      "name": ""
    },
    "license": {
      "name": ""
    },
    "version": "0.1"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/JABR3830/ArticlesAPI/1.0",
      "description": "SwaggerHub API Auto Mocking"
    },
    {
      "url": "https://virtserver.swaggerhub.com/JABR3830/ArticleAPI/1.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/articles/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Article",
        "description": "Get an ArticleVersion identified by it's unique ID",
        "operationId": "getArticleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Article"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
                      "title": "string",
                      "creation_date": "2019-08-24T14:15:22Z",
                      "author": {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "name": "string"
                      },
                      "tags": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "tag": "string"
                        }
                      ],
                      "versions": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "title": "string",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string"
                          },
                          "modification_date": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "rating": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid Article ID format. "
          },
          "404": {
            "description": "Article Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "editors"
        ],
        "summary": "Delete Article",
        "description": "Delete an Article identified by it's unique ID",
        "operationId": "deleteArticleByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article successfully deleted."
          },
          "400": {
            "description": "Bad Request, invalid Article ID format. "
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Article Not Found"
          }
        }
      }
    },
    "/articles/versions/by-name/{name}": {
      "get": {
        "tags": [],
        "summary": "Get ArticleVersion by name",
        "description": "Get the most recent ArticleVersion the Article with the given name from the specified Wiki.",
        "operationId": "getArticleByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wiki",
            "in": "query",
            "description": "The ID of the wiki of the Article",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleVersion"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                      "author": {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "name": "string"
                      },
                      "title": "string",
                      "modification_date": "2019-08-24T14:15:22Z",
                      "body": "string",
                      "tags": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "tag": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid Article name format. "
          },
          "404": {
            "description": "Article Not Found"
          }
        }
      }
    },
    "/articles": {
      "get": {
        "tags": [],
        "summary": "Search for Articles",
        "description": "Get a list of Articles from a given Wiki that match a keyword string. Results can by filtered by tags, sorted by different parameters and support pagination.",
        "operationId": "searchArticles",
        "parameters": [
          {
            "name": "wiki_id",
            "in": "query",
            "description": "The ID of the wiki where the serch will be made",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search query for the name of the article",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "name"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A comma-separated list of tag IDs to search for",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "example": [
                "tag1",
                "tag2"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "example": 10,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "example": 20,
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorts the articles by different criteria",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "recent, oldest, popular, unpopular",
              "default": "none"
            }
          },
          {
            "name": "creation_date",
            "in": "query",
            "description": "Single date or range",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "author_name",
            "in": "query",
            "description": "Filter for the author of the Article",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "editor_name",
            "in": "query",
            "description": "Filter for the editors of the Article",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "articles": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
                          "title": "string",
                          "creation_date": "2019-08-24T14:15:22Z",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string"
                          },
                          "tags": [
                            {
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "tag": "string"
                            }
                          ],
                          "versions": [
                            {
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "title": "string",
                              "author": {
                                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                "name": "string"
                              },
                              "modification_date": "2019-08-24T14:15:22Z"
                            }
                          ],
                          "rating": 0
                        }
                      ],
                      "total": 0,
                      "offset": 0,
                      "limit": 0,
                      "previous": "http://example.com",
                      "next": "http://example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid input paramaters",
            "content": {}
          },
          "404": {
            "description": "Article Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "editors"
        ],
        "summary": "Create Article",
        "description": "Create a new Article in a given wiki",
        "operationId": "createArticle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewArticle"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "title": "string",
                    "author": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "name": "string"
                    },
                    "tags": [
                      {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "tag": "string"
                      }
                    ],
                    "body": "string",
                    "wiki_id": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Article"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
                      "title": "string",
                      "creation_date": "2019-08-24T14:15:22Z",
                      "author": {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "name": "string"
                      },
                      "tags": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "tag": "string"
                        }
                      ],
                      "versions": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "title": "string",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string"
                          },
                          "modification_date": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "rating": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid paramaters"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/articles/versions/{id}": {
      "get": {
        "tags": [],
        "summary": "Get ArticleVersion",
        "description": "Get an ArticleVersion identified by it's unique ID",
        "operationId": "getArticleVersionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleVersion"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                      "author": {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "name": "string"
                      },
                      "title": "string",
                      "modification_date": "2019-08-24T14:15:22Z",
                      "body": "string",
                      "tags": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "tag": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid ArticleVersion ID format. "
          },
          "404": {
            "description": "Article Version Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "editors"
        ],
        "summary": "Delete ArticleVersion",
        "description": "Delete an ArticleVersion identified by it's unique ID",
        "operationId": "deleteArticleVersionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ArticleVersion successfully deleted."
          },
          "400": {
            "description": "Bad Request, invalid ArticleVersion ID format. "
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "ArticleVersion Not Found"
          }
        }
      }
    },
    "/articles/{id}/versions": {
      "get": {
        "tags": [],
        "summary": "Get Article's ArticleVersions",
        "description": "Get a list of ArticleVersions of a given Article. Results can be sorted by creation date adn support pagination.",
        "operationId": "getArticleVersionListByArticleID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "example": 50,
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorts the articles by different criteria",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "recent, oldest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleVersionList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "article_versions": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "title": "string",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string"
                          },
                          "modification_date": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "total": 0,
                      "offset": 0,
                      "limit": 0,
                      "previous": "http://example.com",
                      "next": "http://example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid input paramaters"
          },
          "404": {
            "description": "Article not Found"
          }
        }
      },
      "post": {
        "tags": [
          "editors"
        ],
        "summary": "Create ArticleVersion for an Article",
        "description": "Create an ArticleVersion for a given Article and adds it to the list of versions of the Article.",
        "operationId": "createArticleVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewArticleVersion"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                    "title": "string",
                    "author": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "name": "string"
                    },
                    "tags": [
                      {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "tag": "string"
                      }
                    ],
                    "body": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Version successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleVersion"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                      "title": "string",
                      "modification_date": "2019-08-24T14:15:22Z",
                      "body": "string",
                      "editors": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "name": "string",
                          "edition_date": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "tags": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "tag": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, Invalid Parameters"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/articles/{article_id}/versions/{version_id}": {
      "put": {
        "tags": [
          "editors"
        ],
        "summary": "Restore ArticleVersion",
        "description": "Restore an older ArticleVersion of an Article.",
        "operationId": "restoreArticleVersion",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ArticleVersion successfully restored"
          },
          "400": {
            "description": "invalid Article or ArticleVersion ID format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Article Version Not Found"
          }
        }
      }
    },
    "/articles/commented_by/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Articles commented by User",
        "description": "Get a list of the Articles commented by a given user.",
        "operationId": "getArticlesCommentedByUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorts the articles by different criteria",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "recent, oldest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "articles": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
                          "title": "string",
                          "creation_date": "2019-08-24T14:15:22Z",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string"
                          },
                          "tags": [
                            {
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "tag": "string"
                            }
                          ],
                          "versions": [
                            {
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "title": "string",
                              "author": {
                                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                "name": "string"
                              },
                              "modification_date": "2019-08-24T14:15:22Z"
                            }
                          ],
                          "rating": 0
                        }
                      ],
                      "total": 0,
                      "offset": 0,
                      "limit": 0,
                      "previous": "http://example.com",
                      "next": "http://example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, inavalid User ID format"
          },
          "404": {
            "description": "User Not Found"
          }
        }
      }
    },
    "/articles/author/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Articles by Author",
        "description": "Get a list of Articles given an author's ID.  ",
        "operationId": "GetArticleByAuthor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorts the articles by different criteria",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "recent, oldest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "articles": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
                          "title": "string",
                          "creation_date": "2019-08-24T14:15:22Z",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string"
                          },
                          "tags": [
                            {
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "tag": "string"
                            }
                          ],
                          "versions": [
                            {
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "title": "string",
                              "author": {
                                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                "name": "string"
                              },
                              "modification_date": "2019-08-24T14:15:22Z"
                            }
                          ],
                          "rating": 0
                        }
                      ],
                      "total": 0,
                      "offset": 0,
                      "limit": 0,
                      "previous": "http://example.com",
                      "next": "http://example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, The given ID was not correct."
          },
          "404": {
            "description": "Author Not Found."
          }
        }
      }
    },
    "/comments/users/{user_id}": {
      "get": {
        "tags": [],
        "summary": "Get Users Comments",
        "description": "Retrieves all comments from an user",
        "operationId": "get-users-comments",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The unique ID of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "article_id",
            "in": "query",
            "description": "Fillters the results by the article's ID",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Set the order the comments will be shown. It is determined by date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "recent - oldest",
              "default": "recent"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of responses to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "creation_date",
            "in": "query",
            "description": "Single date or range",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentListResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "comments": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string",
                            "image": "http://example.com"
                          },
                          "body": "string",
                          "creation_date": "2019-08-24"
                        }
                      ],
                      "limit": 20,
                      "offset": 1,
                      "total": 100,
                      "next": "http://example.com",
                      "previous": "http://example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid User ID format"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/comments/articles/{article_id}": {
      "get": {
        "tags": [
          "default"
        ],
        "summary": "Get Articles Comments",
        "description": "Retrieves all comments from an articles",
        "operationId": "get_article_comments",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "The unique ID of the article",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Set the order the comments will be shown. It is determined by date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "recent - oldest",
              "default": "recent"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of responses to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "creation_date",
            "in": "query",
            "description": "Single date or range",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentListResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "comments": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                          "author": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "name": "string",
                            "image": "http://example.com"
                          },
                          "body": "string",
                          "creation_date": "2019-08-24"
                        }
                      ],
                      "limit": 20,
                      "offset": 0,
                      "total": 100,
                      "next": "http://example.com",
                      "previous": "http://example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid parameters"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Post Comment",
        "description": "Posts a new comment in an article",
        "operationId": "post_comment",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "The unique ID of the article",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object that contains the author and content of the comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment successufully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, wrong content structure"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Article or Author not found"
          }
        }
      }
    },
    "/comments/{comment_id}": {
      "delete": {
        "tags": [],
        "summary": "Delete Comment",
        "description": "Deletes an article's comment",
        "operationId": "delete_comment",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "The unique ID of the article",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content, comment deleted successfully"
          },
          "400": {
            "description": "Bad Request, invalid Comment ID format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      }
    },
    "/wikis": {
      "description": "Search for wikis using the below query parameters.",
      "get": {
        "summary": "Search for Wikis",
        "description": "Get a list of Wikis that match a keyword string. Results can by filtered by tags, sorted by different parameters and support pagination.",
        "operationId": "searchWikis",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "String to be searched within the wiki's name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Maximum amount of results to be returned.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "example": 20,
              "default": 20
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "example": 10,
              "default": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorts the articles by different criteria",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "creation_date",
            "in": "query",
            "description": "Single date or range",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2024/01/01, 2023/01/01-2024/01/01"
            }
          },
          {
            "name": "author_name",
            "in": "query",
            "description": "Filter for the author of the Wiki",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "author_name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WikiList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "articles": [
                        {
                          "id": "string",
                          "name": "string",
                          "description": "string",
                          "author": {
                            "id": "string",
                            "name": "string"
                          }
                        }
                      ],
                      "total": 0,
                      "offset": 0,
                      "limit": 0,
                      "previous": "http://example.com",
                      "next": "http://example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid parameters"
          },
          "418": {
            "description": "The server refused to brew coffee. <br/> *Yes, this is a joke. Yes, this is a reserved HTTP response code since 1998.* <br/> *See [RFC 2324](https://datatracker.ietf.org/doc/html/rfc2324) for more information. Actually, do not.*"
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Create Wiki",
        "description": "Create a new Wiki",
        "operationId": "createWiki",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "String to be searched within the wiki's name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results to be returned.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "example": 20,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "example": 10,
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWiki"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "name": "string",
                    "description": "string",
                    "author": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created succesfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wiki"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/wikis/{id}": {
      "get": {
        "summary": "Get Wiki",
        "description": "Get Wiki with the matching ID.",
        "operationId": "getWiki",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the requested wiki, may be its name or its ID. Keep in mind wiki names may be modified.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wiki"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "1",
                      "name": "Example wiki",
                      "description": "This is an example of a response when getting a wiki",
                      "author": "Someone, change when user return is finalized",
                      "tags": [
                        {
                          "id": "1",
                          "name": "Gift cards",
                          "wiki_id": "1"
                        },
                        {
                          "id": "2",
                          "name": "Stores",
                          "wiki_id": "1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Bad Request. Wiki not found."
          }
        }
      },
      "put": {
        "tags": [
          "admins"
        ],
        "summary": "Update Wiki",
        "description": "Update Wiki with wiki the matching ID",
        "operationId": "updateWiki",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the requested wiki, may be its name or its ID. Keep in mind wiki names may be modified.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWiki"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wiki"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "1",
                      "name": "Example wiki",
                      "description": "This is an example of a response when getting a wiki",
                      "author": "Someone, change when user return is finalized",
                      "tags": [
                        {
                          "id": "1",
                          "name": "Gift cards",
                          "wiki_id": "1"
                        },
                        {
                          "id": "2",
                          "name": "Stores",
                          "wiki_id": "1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden. User is not authorized to edit wiki the requested wiki."
          },
          "404": {
            "description": "Bad Request. Wiki not found."
          }
        }
      },
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "Remove Wiki",
        "description": "Remove Wiki with the matching ID.",
        "operationId": "removeWiki",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the requested wiki, may be its name or its ID. Keep in mind wiki names may be modified.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed successfully. Returned deleted item.",
            "content": {}
          },
          "400": {
            "description": "Bad Request."
          },
          "403": {
            "description": "Forbidden. User is not authorized to delete wikis."
          },
          "404": {
            "description": "Wiki not found."
          }
        }
      }
    },
    "/wikis/{name}": {
      "get": {
        "summary": "Get Wiki by name",
        "description": "Get the Wiki with the given name.",
        "operationId": "getOneWikiByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Identifier of the requested wiki, may be its name or its ID. Keep in mind wiki names may be modified.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wiki"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "1",
                      "name": "Example wiki",
                      "description": "This is an example of a response when getting a wiki",
                      "author": "Someone, change when user return is finalized",
                      "tags": [
                        {
                          "id": "1",
                          "name": "Gift cards",
                          "wiki_id": "1"
                        },
                        {
                          "id": "2",
                          "name": "Stores",
                          "wiki_id": "1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wiki"
                }
              }
            }
          },
          "404": {
            "description": "Wiki Not Found"
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Tag",
        "description": "Get a tag by ID. ",
        "operationId": "get-tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid Tag ID format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "Delete Tag",
        "description": "Delete a wiki tag.",
        "operationId": "delete-tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content, tag deleted succesfully"
          },
          "400": {
            "description": "Bad Request, invalid ID format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      }
    },
    "/tags/wikis/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Wikis Tags",
        "description": "Retrieve all the tags from a wiki.",
        "operationId": "get-wiki-tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the wiki.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of responses to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "example": 20,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "example": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid parameters"
          },
          "404": {
            "description": "Wiki not found"
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Create Tag",
        "description": "Create a new tag in a given wiki.",
        "operationId": "post-wiki-tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the wiki.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, wrong content structure"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tags/articles/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Articles Tag",
        "description": "Retrieves all the tags from an article.",
        "operationId": "get-articles-tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of responses to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "example": 20,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "example": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagList"
                }
              }
            }
          },
          "404": {
            "description": "Article not found"
          }
        }
      },
      "put": {
        "tags": [
          "editors"
        ],
        "summary": "Assign Tags",
        "description": "Assigns a list of tags, given their IDs, to an article.",
        "operationId": "assign-tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagIDList"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "tag_ids": [
                      "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content, tags assigned"
          },
          "400": {
            "description": "Bad Request, invalid paramaters format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Article or tag not found"
          }
        }
      },
      "delete": {
        "tags": [
          "editors"
        ],
        "summary": "Unassign Tags",
        "description": "Unassigns a list of tags, given their IDs to an article.",
        "operationId": "unassign-tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "List of Tag IDs",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "maxItems": 50,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "tag1",
                "tag2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content, tag unassigned succesfully"
          },
          "400": {
            "description": "Bad Request, invalid invalid paramaters format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Article or tag not found"
          }
        }
      }
    },
    "/ratings/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Rating",
        "description": "Get the Rating with the provided ID",
        "operationId": "get-rating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rating found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                      "Author": {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "name": "string",
                        "image": "http://example.com"
                      },
                      "value": 0,
                      "creation_date": "2019-08-24"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid Rating ID format"
          },
          "404": {
            "description": "Rating Not Found"
          }
        }
      },
      "delete": {
        "tags": [],
        "summary": "Delete Rating",
        "description": "Delete the rating associated with the selected ID",
        "operationId": "delete-rating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Bad Request, invalid Rating ID format"
          },
          "403": {
            "description": "No permissions to delete"
          },
          "404": {
            "description": "Rating Not Found"
          }
        }
      }
    },
    "/ratings/articles/{id}": {
      "put": {
        "tags": [],
        "summary": "Edit Article's Rating",
        "description": "Update the value of an already existing Rating",
        "operationId": "edit-article-rating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rating"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                    "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                    "Author": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "name": "string",
                      "image": "http://example.com"
                    },
                    "value": 0,
                    "creation_date": "2019-08-24"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rating edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                      "Author": {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "name": "string",
                        "image": "http://example.com"
                      },
                      "value": 0,
                      "creation_date": "2019-08-24"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid Article ID format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Rate Article",
        "description": "Create a rating for a given Article",
        "operationId": "rate-article",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRating"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rating created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid Article ID format"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ratings/articles/{id}/average": {
      "get": {
        "tags": [],
        "summary": "Get Article's average rating",
        "description": "Get data about the average rating of the article",
        "operationId": "get-article-average-rating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AverageRating"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, invalid Article ID format"
          }
        }
      }
    },
    "/ratings/articles/{articleId}/users/{userId}": {
      "get": {
        "tags": [],
        "summary": "Get rating made by an user in an article",
        "operationId": "get-ratings-bu-user-on-article",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Article": {
        "required": [
          "author",
          "creation_date",
          "id",
          "rating",
          "tags",
          "title",
          "versions",
          "wiki_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the article",
            "format": "uuid"
          },
          "wiki_id": {
            "type": "string",
            "description": "The ID corresponding to the wiki the article belongs to.",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the article. The same as the title of the most recent version."
          },
          "creation_date": {
            "type": "string",
            "description": "The date of creation of the article.",
            "format": "date-time"
          },
          "author": {
            "$ref": "#/components/schemas/SimplifiedAuthor"
          },
          "tags": {
            "type": "array",
            "description": "Array of the tags of the article. The same as the array of tags of the most recent version.",
            "items": {
              "$ref": "#/components/schemas/SimplifiedTag"
            }
          },
          "versions": {
            "type": "array",
            "description": "Array of simplified articleversions",
            "items": {
              "$ref": "#/components/schemas/SimplifiedArticleVersion"
            }
          },
          "rating": {
            "minimum": 0,
            "type": "number",
            "description": "Average rating of the Article",
            "format": "double",
            "x-stoplight": {
              "id": "102q2hlty1t4n"
            }
          }
        },
        "description": "Article of a Wiki",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
            "title": "string",
            "creation_date": "2019-08-24T14:15:22Z",
            "author": {
              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
              "name": "string"
            },
            "tags": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "tag": "string"
              }
            ],
            "versions": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "title": "string",
                "author": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "name": "string"
                },
                "modification_date": "2019-08-24T14:15:22Z"
              }
            ],
            "rating": 0
          }
        }
      },
      "ArticleVersion": {
        "required": [
          "article_id",
          "author",
          "body",
          "id",
          "modification_date",
          "tags",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the version of the article.",
            "format": "uuid"
          },
          "article_id": {
            "type": "string",
            "description": "The ID of the article.",
            "format": "uuid"
          },
          "author": {
            "$ref": "#/components/schemas/SimplifiedAuthor"
          },
          "title": {
            "type": "string",
            "description": "The title of the version of the article."
          },
          "modification_date": {
            "type": "string",
            "description": "The date of modification the article that created the version.",
            "format": "date-time"
          },
          "body": {
            "type": "string",
            "description": "The body of the version."
          },
          "tags": {
            "type": "array",
            "description": "Array of the tags of the version of the article.",
            "items": {
              "$ref": "#/components/schemas/SimplifiedTag"
            }
          }
        },
        "description": "Concrete version of an Article object ",
        "x-examples": {
          "Example 1": {
            "id": "672271b95150a9cd3f465999",
            "article_id": "672271d05150a9cd3f46599a",
            "body": "wikiText_body",
            "editors": [
              {
                "id": "672272475150a9cd3f46599c",
                "name": "user_name",
                "edition_date": "2024-01-01T00:00:00.000Z"
              }
            ],
            "modification_date": "2024-01-01T00:00:00.000Z",
            "tags": [
              {
                "id": "672271fe5150a9cd3f46599b",
                "tag": "tag"
              }
            ],
            "title": "article_version_title"
          }
        }
      },
      "SimplifiedArticleVersion": {
        "required": [
          "id",
          "modification_date",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the article version.",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the article version."
          },
          "author": {
            "$ref": "#/components/schemas/SimplifiedAuthor"
          },
          "modification_date": {
            "type": "string",
            "description": "The date of modification of the article version.",
            "format": "date-time"
          }
        },
        "description": "Simplification of an ArticleVersion object",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "title": "string",
            "author": {
              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
              "name": "string"
            },
            "modification_date": "2019-08-24T14:15:22Z"
          }
        }
      },
      "SimplifiedTag": {
        "title": "SimplifiedTag",
        "required": [
          "id",
          "tag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The name of the tag.",
            "format": "uuid"
          },
          "tag": {
            "type": "string",
            "description": "The name of the tag.",
            "x-stoplight": {
              "id": "28n4e2xedche5"
            }
          }
        },
        "description": "Keywords for identifying articles",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "tag": "string"
          }
        }
      },
      "ArticleList": {
        "required": [
          "articles",
          "limit",
          "next",
          "offset",
          "previous",
          "total"
        ],
        "type": "object",
        "properties": {
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Article"
            },
            "x-stoplight": {
              "id": "qmckelb8p9agh"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items available to return.",
            "x-stoplight": {
              "id": "ceyp9h3u6pq3t"
            }
          },
          "offset": {
            "type": "integer",
            "description": "The offset of the items returned (as set in the query or by default)",
            "x-stoplight": {
              "id": "y8f5uy4secbdp"
            }
          },
          "limit": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum number of items in the response (as set in the query or by default).",
            "example": 0,
            "x-stoplight": {
              "id": "mli08w7p9m5ct"
            }
          },
          "previous": {
            "type": "string",
            "description": "Request to the previous page of items. ( null if none)",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "fr352m14ihvc7"
            }
          },
          "next": {
            "type": "string",
            "description": "Request to the next page of items. ( null if none) ",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "d6rwzi2d4o45u"
            }
          }
        },
        "description": "List of Articles. Supports pagination.",
        "x-examples": {
          "Example 1": {
            "articles": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
                "title": "string",
                "creation_date": "2019-08-24T14:15:22Z",
                "author": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "name": "string"
                },
                "tags": [
                  {
                    "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                    "tag": "string"
                  }
                ],
                "versions": [
                  {
                    "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                    "title": "string",
                    "author": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "name": "string"
                    },
                    "modification_date": "2019-08-24T14:15:22Z"
                  }
                ],
                "rating": 0
              }
            ],
            "total": 0,
            "offset": 0,
            "limit": 0,
            "previous": "http://example.com",
            "next": "http://example.com"
          }
        }
      },
      "ArticleVersionList": {
        "required": [
          "article_versions",
          "limit",
          "next",
          "offset",
          "previous",
          "total"
        ],
        "type": "object",
        "properties": {
          "article_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplifiedArticleVersion"
            },
            "x-stoplight": {
              "id": "dytirb2nopmcp"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items available to return.",
            "x-stoplight": {
              "id": "nyqo2igxm0plp"
            }
          },
          "offset": {
            "type": "integer",
            "description": "The offset of the items returned (as set in the query or by default)",
            "x-stoplight": {
              "id": "cy8nldi2is9br"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of items in the response (as set in the query or by default).",
            "x-stoplight": {
              "id": "p51ex5e7pdmzw"
            }
          },
          "previous": {
            "type": "string",
            "description": "Request to the next page of items. ( null if none)",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "tlbg5auyullr7"
            }
          },
          "next": {
            "type": "string",
            "description": "Request to the next page of items. ( null if none) ",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "rc3t7xs8w8yr3"
            }
          }
        },
        "description": "List of ArticleVersions. Supports pagination.",
        "x-examples": {
          "Example 1": {
            "article_versions": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "title": "string",
                "author": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "name": "string"
                },
                "modification_date": "string"
              }
            ],
            "total": 0,
            "offset": 0,
            "limit": 0,
            "previous": "http://example.com",
            "next": "http://example.com"
          }
        }
      },
      "NewArticleVersion": {
        "required": [
          "author",
          "body",
          "tags",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the version of the article.",
            "x-stoplight": {
              "id": "3ec4vruerwwxz"
            }
          },
          "author": {
            "$ref": "#/components/schemas/SimplifiedAuthor"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplifiedTag"
            },
            "x-stoplight": {
              "id": "gn4btncpluv0e"
            }
          },
          "body": {
            "type": "string",
            "description": "The body of the version.",
            "x-stoplight": {
              "id": "sdqsmbl8khsan"
            }
          }
        },
        "description": "Data required to the user to create a new ArticleVersion of an Article (given in the path of the endpoint)",
        "x-examples": {
          "Example 1": {
            "title": "string",
            "author": {
              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
              "name": "string"
            },
            "tags": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "tag": "string"
              }
            ],
            "body": "string"
          }
        }
      },
      "SimplifiedAuthor": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the author.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the author."
          }
        },
        "description": "The author of an Article or ArticleVersion.",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "name": "string"
          }
        }
      },
      "NewArticle": {
        "title": "NewArticle",
        "required": [
          "author",
          "tags",
          "title",
          "wiki_id"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the version of the article.",
            "x-stoplight": {
              "id": "3ec4vruerwwxz"
            }
          },
          "author": {
            "$ref": "#/components/schemas/SimplifiedAuthor"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplifiedTag"
            },
            "x-stoplight": {
              "id": "gn4btncpluv0e"
            }
          },
          "body": {
            "type": "string",
            "description": "The body of the version.",
            "x-stoplight": {
              "id": "sdqsmbl8khsan"
            }
          },
          "wiki_id": {
            "type": "string",
            "description": "The ID of the Wiki where the Article is created.",
            "x-stoplight": {
              "id": "sdqsmbl8khsan"
            }
          }
        },
        "description": "Data required to the user to create a new Article and its first version",
        "x-examples": {
          "Example 1": {
            "title": "string",
            "author": {
              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
              "name": "string"
            },
            "tags": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "tag": "string"
              }
            ],
            "body": "string",
            "wiki_id": "string"
          }
        }
      },
      "Comment": {
        "title": "Comment",
        "required": [
          "article_id",
          "author",
          "body",
          "creation_date",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the comment",
            "format": "uuid"
          },
          "article_id": {
            "type": "string",
            "description": "The unique ID of the article",
            "format": "uuid",
            "x-stoplight": {
              "id": "mey6f99yvxfp2"
            }
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "body": {
            "type": "string",
            "description": "The content of the comment",
            "x-stoplight": {
              "id": "bi45nhz9oxg6k"
            }
          },
          "creation_date": {
            "type": "string",
            "description": "The date of creation of the comment",
            "format": "date",
            "x-stoplight": {
              "id": "4h2c96nqmlraq"
            }
          }
        },
        "description": "Comment entity response",
        "x-internal": false,
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
            "author": {
              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
              "name": "string",
              "image": "http://example.com"
            },
            "body": "string",
            "creation_date": "2019-08-24"
          }
        }
      },
      "Author": {
        "title": "Author",
        "required": [
          "id",
          "image",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the user author",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The username of the user",
            "x-stoplight": {
              "id": "x4btzoftqh54q"
            }
          },
          "image": {
            "type": "string",
            "description": "The avatar image of the user",
            "format": "uri",
            "x-stoplight": {
              "id": "l0rfzjtnhrem5"
            }
          }
        },
        "description": "User object containing details of the author",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "name": "username",
            "image": "http://example.com"
          }
        }
      },
      "NewComment": {
        "title": "NewComment",
        "required": [
          "author_id",
          "body"
        ],
        "type": "object",
        "properties": {
          "author_id": {
            "type": "string",
            "description": "The unique ID of the user author",
            "format": "uuid",
            "x-stoplight": {
              "id": "r0fl6y1rs0hck"
            }
          },
          "body": {
            "type": "string",
            "description": "The content of the commment",
            "x-stoplight": {
              "id": "ax8pi9hleeuof"
            }
          }
        },
        "description": "New comment info for creating a new entry in the database",
        "x-examples": {
          "Example 1": {
            "author_id": "78424c75-5c41-4b25-9735-3c9f7d05c59e",
            "body": "string"
          }
        }
      },
      "CommentListResponse": {
        "title": "CommentListResponse",
        "required": [
          "comments",
          "limit",
          "next",
          "offset",
          "previous",
          "total"
        ],
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "limit": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The maximum of responses to be returned",
            "example": 20,
            "default": 20,
            "x-stoplight": {
              "id": "ni4x3zmmfzw10"
            }
          },
          "offset": {
            "minimum": 0,
            "type": "integer",
            "description": "The index of the first result to return. Use with limit to get the next page of search results.",
            "default": 0,
            "x-stoplight": {
              "id": "w4f7vrojx5mi8"
            }
          },
          "total": {
            "minimum": 0,
            "type": "integer",
            "description": "The total number of results of the query",
            "example": 100,
            "x-stoplight": {
              "id": "m9i5ksjg4zx3v"
            }
          },
          "next": {
            "type": "string",
            "description": "The url to request the next batch of results",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "gtd0na0za72eu"
            }
          },
          "previous": {
            "type": "string",
            "description": "The url to request the previous batch of results",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "auv9fi5lbur9r"
            }
          }
        },
        "description": "Response entity that returns the comments and the pagination info.",
        "x-examples": {
          "Example 1": {
            "comments": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
                "author": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "name": "string",
                  "image": "http://example.com"
                },
                "body": "string",
                "creation_date": "2019-08-24"
              }
            ],
            "limit": 20,
            "offset": 0,
            "total": 100,
            "next": "http://example.com",
            "previous": "http://example.com"
          }
        }
      },
      "NewWiki": {
        "required": [
          "author",
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the wiki."
          },
          "description": {
            "type": "string",
            "description": "Details of the wiki set by its editors."
          },
          "author": {
            "type": "string",
            "description": "Creator of the wiki. Should not remain a string."
          }
        },
        "description": "Model of a new wiki"
      },
      "Wiki": {
        "required": [
          "author",
          "creation_date",
          "description",
          "id",
          "name",
          "rating",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the wiki."
          },
          "name": {
            "type": "string",
            "description": "Name of the wiki."
          },
          "description": {
            "type": "string",
            "description": "Details of the wiki set by its editors."
          },
          "creation_date": {
            "type": "string",
            "description": "Date of creation of the wiki.",
            "format": "date_time"
          },
          "author": {
            "$ref": "#/components/schemas/SimplifiedAuthor"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplifiedTag"
            }
          },
          "rating": {
            "maximum": 5,
            "minimum": 0,
            "type": "number",
            "description": "Average rating of the wiki",
            "format": "double",
            "example": 4.5,
            "x-stoplight": {
              "id": "n41bjowninj5a"
            }
          }
        },
        "example": {
          "id": "1",
          "name": "Example wiki",
          "description": "This is an example of a response when getting a wiki",
          "author": "Someone, change when user return is finalized",
          "tags": [
            {
              "id": "1",
              "name": "Gift cards",
              "wiki_id": "1"
            },
            {
              "id": "2",
              "name": "Stores",
              "wiki_id": "1"
            }
          ]
        }
      },
      "WikiList": {
        "required": [
          "articles",
          "limit",
          "next",
          "offset",
          "previous",
          "total"
        ],
        "type": "object",
        "properties": {
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplifiedWiki"
            },
            "x-stoplight": {
              "id": "qmckelb8p9agh"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items available to return.",
            "x-stoplight": {
              "id": "ceyp9h3u6pq3t"
            }
          },
          "offset": {
            "type": "integer",
            "description": "The offset of the items returned (as set in the query or by default)",
            "x-stoplight": {
              "id": "y8f5uy4secbdp"
            }
          },
          "limit": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum number of items in the response (as set in the query or by default).",
            "example": 0,
            "x-stoplight": {
              "id": "mli08w7p9m5ct"
            }
          },
          "previous": {
            "type": "string",
            "description": "Request to the previous page of items. ( null if none)",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "fr352m14ihvc7"
            }
          },
          "next": {
            "type": "string",
            "description": "Request to the next page of items. ( null if none) ",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "d6rwzi2d4o45u"
            }
          }
        },
        "description": "List of Wikis. Supports pagination."
      },
      "SimplifiedWiki": {
        "title": "SimplifiedWiki",
        "required": [
          "author",
          "creation_date",
          "description",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the wiki."
          },
          "name": {
            "type": "string",
            "description": "Name of the wiki."
          },
          "description": {
            "type": "string",
            "description": "Details of the wiki set by its editors."
          },
          "creation_date": {
            "type": "string",
            "description": "Date of creation of the wiki.",
            "format": "date_time"
          },
          "rating": {
            "maximum": 5,
            "minimum": 0,
            "type": "number",
            "description": "Average rating of the wiki",
            "format": "double",
            "example": 4.5,
            "x-stoplight": {
              "id": "n41bjowninj5a"
            }
          },
          "author": {
            "$ref": "#/components/schemas/SimplifiedAuthor"
          }
        }
      },
      "Tag": {
        "title": "Tag",
        "required": [
          "articles",
          "id",
          "tag",
          "wiki_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tag.",
            "format": "uuid"
          },
          "tag": {
            "type": "string",
            "description": "The name of the tag.",
            "x-stoplight": {
              "id": "g3ziz7fieuzmb"
            }
          },
          "wiki_id": {
            "type": "string",
            "description": "The ID corresponding to the wiki the tag belongs to.",
            "format": "uuid",
            "x-stoplight": {
              "id": "ynzgbowu7wnwm"
            }
          },
          "articles": {
            "type": "array",
            "description": "Array of articles that have the tag.",
            "items": {
              "$ref": "#/components/schemas/SimplifiedArticle"
            },
            "x-stoplight": {
              "id": "3qq291kyraib9"
            }
          }
        },
        "description": "Tag entity.",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "tag": "string",
            "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
            "articles": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "name": "string"
              }
            ]
          }
        }
      },
      "SimplifiedArticle": {
        "title": "SimplifiedArticle",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the article.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the article.",
            "x-stoplight": {
              "id": "7riv8a15yswa9"
            }
          }
        },
        "description": "Article entity.",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "name": "string"
          }
        }
      },
      "NewTag": {
        "title": "NewTag",
        "required": [
          "tag"
        ],
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "The name of the tag.",
            "x-stoplight": {
              "id": "yfh5p42q7b13x"
            }
          }
        },
        "description": "Model for a new Tag",
        "x-examples": {
          "Example 1": {
            "tag": "string"
          }
        }
      },
      "TagIDList": {
        "title": "TagIDsList",
        "required": [
          "tag_ids"
        ],
        "type": "object",
        "properties": {
          "tag_ids": {
            "type": "array",
            "description": "List of Tag IDs",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "x-stoplight": {
              "id": "kmi9kpdl1ztoh"
            }
          }
        },
        "x-examples": {
          "Example 1": {
            "tag_ids": [
              "497f6eca-6276-4993-bfeb-53cbbbba6f08"
            ]
          }
        }
      },
      "TagList": {
        "required": [
          "articles",
          "limit",
          "next",
          "offset",
          "previous",
          "total"
        ],
        "type": "object",
        "properties": {
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "x-stoplight": {
              "id": "qmckelb8p9agh"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items available to return.",
            "x-stoplight": {
              "id": "ceyp9h3u6pq3t"
            }
          },
          "offset": {
            "type": "integer",
            "description": "The offset of the items returned (as set in the query or by default)",
            "x-stoplight": {
              "id": "y8f5uy4secbdp"
            }
          },
          "limit": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum number of items in the response (as set in the query or by default).",
            "example": 0,
            "x-stoplight": {
              "id": "mli08w7p9m5ct"
            }
          },
          "previous": {
            "type": "string",
            "description": "Request to the previous page of items. ( null if none)",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "fr352m14ihvc7"
            }
          },
          "next": {
            "type": "string",
            "description": "Request to the next page of items. ( null if none) ",
            "format": "uri",
            "nullable": true,
            "x-stoplight": {
              "id": "d6rwzi2d4o45u"
            }
          }
        },
        "description": "List of Tags. Supports pagination.",
        "x-examples": {
          "Example 1": {
            "articles": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "tag": "string",
                "wiki_id": "9a3179cd-aa83-4a5b-a08a-5c794d4020a8",
                "articles": [
                  {
                    "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                    "name": "string"
                  }
                ]
              }
            ],
            "total": 0,
            "offset": 0,
            "limit": 0,
            "previous": "http://example.com",
            "next": "http://example.com"
          }
        }
      },
      "NewRating": {
        "title": "NewRating",
        "required": [
          "author_id",
          "value"
        ],
        "type": "object",
        "properties": {
          "author_id": {
            "type": "string",
            "description": "Author ID: ID of the person who publish the rating",
            "format": "uuid",
            "x-stoplight": {
              "id": "q4bc1zm0v0tt4"
            }
          },
          "value": {
            "type": "number",
            "description": "Value: The value of the rating published",
            "x-stoplight": {
              "id": "b3wl5oq26a7ik"
            }
          }
        },
        "description": "New Rating, created by one user associated with one article (Article ID is obtained in path)",
        "x-examples": {
          "Example 1": {
            "author_id": "78424c75-5c41-4b25-9735-3c9f7d05c59e",
            "rating": 5
          }
        }
      },
      "Rating": {
        "title": "Rating",
        "required": [
          "Author",
          "article_id",
          "creation_date",
          "id",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rating ID\r\n",
            "format": "uuid"
          },
          "article_id": {
            "type": "string",
            "description": "Article ID where the rating is published",
            "format": "uuid",
            "x-stoplight": {
              "id": "uzi095sjp0udm"
            }
          },
          "Author": {
            "$ref": "#/components/schemas/Author"
          },
          "value": {
            "type": "number",
            "description": "Rating's value",
            "x-stoplight": {
              "id": "2n2knofgepww9"
            }
          },
          "creation_date": {
            "type": "string",
            "description": "Date where the rating was published",
            "format": "date",
            "x-stoplight": {
              "id": "s2jphmehddzvv"
            }
          }
        },
        "description": "Rating of an Article",
        "x-examples": {
          "Example 1": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "article_id": "e4aad634-3311-4e79-b165-3911549b3b29",
            "Author": {
              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
              "name": "string",
              "image": "http://example.com"
            },
            "value": 0,
            "creation_date": "2019-08-24"
          }
        }
      },
      "AverageRating": {
        "title": "AverageRatingData",
        "required": [
          "average",
          "five_count",
          "four_count",
          "one_count",
          "three_count",
          "total",
          "total_sum",
          "two_count"
        ],
        "type": "object",
        "properties": {
          "average": {
            "type": "number",
            "description": "Average rating of an Article",
            "format": "double",
            "x-stoplight": {
              "id": "xc8d4rg2zmeoe"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of Ratings of an Article",
            "x-stoplight": {
              "id": "1hpzs5e0yz51f"
            }
          },
          "five_count": {
            "type": "integer",
            "description": "Number of 5-star ratings of an Article",
            "x-stoplight": {
              "id": "tgwuumk1xy9rq"
            }
          },
          "four_count": {
            "type": "integer",
            "description": "Number of 4-star ratings of an Article",
            "x-stoplight": {
              "id": "v5hqxo4zght6z"
            }
          },
          "three_count": {
            "type": "integer",
            "description": "Number of 3-star ratings of an Article",
            "x-stoplight": {
              "id": "q3vgda4tu3qrf"
            }
          },
          "two_count": {
            "type": "integer",
            "description": "Number of 2-star ratings of an Article",
            "x-stoplight": {
              "id": "yt0gl4isfgmc8"
            }
          },
          "one_count": {
            "type": "integer",
            "description": "Number of 1-star ratings of an Article",
            "x-stoplight": {
              "id": "4rssmlpes2jtm"
            }
          },
          "total_sum": {
            "type": "integer",
            "x-stoplight": {
              "id": "yjg5812o4dc9c"
            }
          }
        },
        "description": "Data of the average rating of an Article",
        "x-examples": {
          "Example 1": {
            "average": 0,
            "total": 0,
            "five_count": 0,
            "four_count": 0,
            "three_count": 0,
            "two_count": 0,
            "one_count": 0
          }
        }
      }
    },
    "requestBodies": {
      "Wiki_Post": {
        "description": "Body of a post request to upload a new wiki.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewWiki"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {}
  }
}