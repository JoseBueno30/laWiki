# coding: utf-8

"""
    ArticlesAPI

    The Articles API provides endpoints for managing and retrieving articles and article versions within the wiki application. It supports core CRUD (Create, Read, Update, Delete) operations, search functionality, and versioning.

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.simplified_article_version_v1 import SimplifiedArticleVersionV1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ArticleVersionListV1(BaseModel):
    """
    List of ArticleVersions. Supports pagination.
    """ # noqa: E501
    article_versions: List[SimplifiedArticleVersionV1]
    total: StrictInt = Field(description="The total number of items available to return.")
    offset: StrictInt = Field(description="The offset of the items returned (as set in the query or by default)")
    limit: StrictInt = Field(description="The maximum number of items in the response (as set in the query or by default).")
    previous: Optional[StrictStr] = Field(description="Request to the next page of items. ( null if none)")
    next: Optional[StrictStr] = Field(description="Request to the next page of items. ( null if none) ")
    __properties: ClassVar[List[str]] = ["article_versions", "total", "offset", "limit", "previous", "next"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ArticleVersionListV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in article_versions (list)
        _items = []
        if self.article_versions:
            for _item in self.article_versions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['article_versions'] = _items
        # set to None if previous (nullable) is None
        # and model_fields_set contains the field
        if self.previous is None and "previous" in self.model_fields_set:
            _dict['previous'] = None

        # set to None if next (nullable) is None
        # and model_fields_set contains the field
        if self.next is None and "next" in self.model_fields_set:
            _dict['next'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ArticleVersionListV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "article_versions": [SimplifiedArticleVersionV1.from_dict(_item) for _item in obj.get("article_versions")] if obj.get("article_versions") is not None else None,
            "total": obj.get("total"),
            "offset": obj.get("offset"),
            "limit": obj.get("limit"),
            "previous": obj.get("previous"),
            "next": obj.get("next")
        })
        return _obj


