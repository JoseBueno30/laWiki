# coding: utf-8

"""
    RatingsAPI

    API for the Ratings of laWiki web appplication. It provides all endpoints related to CRUD operatios for ratings.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AverageRating(BaseModel):
    """
    Data of the average rating of an Article
    """ # noqa: E501
    average: Union[StrictFloat, StrictInt] = Field(description="Average rating of an Article")
    total: StrictInt = Field(description="Total number of Ratings of an Article")
    total_sum: StrictInt = Field(description="Total sum of all Ratings of an Article")
    five_count: StrictInt = Field(description="Number of 5-star ratings of an Article")
    four_count: StrictInt = Field(description="Number of 4-star ratings of an Article")
    three_count: StrictInt = Field(description="Number of 3-star ratings of an Article")
    two_count: StrictInt = Field(description="Number of 2-star ratings of an Article")
    one_count: StrictInt = Field(description="Number of 1-star ratings of an Article")
    __properties: ClassVar[List[str]] = ["average", "total", "five_count", "four_count", "three_count", "two_count", "one_count"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AverageRating from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AverageRating from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "average": obj.get("average"),
            "total": obj.get("total"),
            "five_count": obj.get("five_count"),
            "four_count": obj.get("four_count"),
            "three_count": obj.get("three_count"),
            "two_count": obj.get("two_count"),
            "one_count": obj.get("one_count")
        })
        return _obj


