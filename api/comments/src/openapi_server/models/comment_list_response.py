# coding: utf-8

"""
    CommentsAPI

    API for the Comments microservice of laWiki web appplication. It provides all endpoints related to CRUD operatios for articles comments.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.comment import Comment
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CommentListResponse(BaseModel):
    """
    Response entity that returns the comments and the pagination info.
    """ # noqa: E501
    comments: List[Comment]
    limit: Annotated[int, Field(le=100, strict=True, ge=0)] = Field(description="The maximum of responses to be returned")
    offset: Annotated[int, Field(strict=True, ge=0)] = Field(description="The index of the first result to return. Use with limit to get the next page of search results.")
    total: Annotated[int, Field(strict=True, ge=0)] = Field(description="The total number of results of the query")
    next: Optional[StrictStr] = Field(description="The url to request the next batch of results")
    previous: Optional[StrictStr] = Field(description="The url to request the previous batch of results")
    __properties: ClassVar[List[str]] = ["comments", "limit", "offset", "total", "next", "previous"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CommentListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item in self.comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['comments'] = _items
        # set to None if next (nullable) is None
        # and model_fields_set contains the field
        if self.next is None and "next" in self.model_fields_set:
            _dict['next'] = None

        # set to None if previous (nullable) is None
        # and model_fields_set contains the field
        if self.previous is None and "previous" in self.model_fields_set:
            _dict['previous'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CommentListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": [Comment.from_dict(_item) for _item in obj.get("comments")] if obj.get("comments") is not None else None,
            "limit": obj.get("limit") if obj.get("limit") is not None else 20,
            "offset": obj.get("offset") if obj.get("offset") is not None else 0,
            "total": obj.get("total"),
            "next": obj.get("next"),
            "previous": obj.get("previous")
        })
        return _obj


